generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
  binaryTargets   = ["native", "windows", "debian-openssl-1.1.x", "debian-openssl-3.0.x"]
}

datasource db {                                                     
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                     String                  @id @default(cuid())
  email                  String                  @unique
  name                   String
  password               String
  role                   Role             @default(STUDENT)
  createdAt              DateTime         @default(now())
  updatedAt              DateTime         @updatedAt
  hackerrankUsername     String?
  hackerrankCookie       String?          // Session cookie for authenticated API calls
  hackerrankCookieStatus String           @default("NOT_LINKED") // LINKED, EXPIRED, NOT_LINKED
  gfgUsername            String?
  leetcodeUsername       String?
  leetcodeCookie         String?          // Encrypted session cookie for authenticated API calls
  leetcodeCookieStatus   String           @default("NOT_LINKED") // LINKED, EXPIRED, NOT_LINKED
  leetcodeTotalSolved    Int?             // Cached total problems solved
  leetcodeEasySolved     Int?             // Cached easy problems solved
  leetcodeMediumSolved   Int?             // Cached medium problems solved
  leetcodeHardSolved     Int?             // Cached hard problems solved

  // Judge0 API Key Management
  judge0ApiKey           String?          // Encrypted RapidAPI key
  judge0KeyStatus        String           @default("NOT_PROVIDED") // ACTIVE, EXHAUSTED, INVALID, NOT_PROVIDED
  judge0QuotaUsed        Int              @default(0) // Daily usage counter
  judge0LastReset        DateTime?        // Last quota reset timestamp

  // Gemini API Key Management (Teachers only)
  geminiApiKey           String?          // Encrypted Gemini API key
  geminiKeyStatus        String           @default("NOT_PROVIDED") // ACTIVE, INVALID, NOT_PROVIDED

  // Relations
  announcements          Announcement[]
  taughtClasses          Class[]
  submissions            Submission[]
  testSessions           TestSession[]
  classes                UsersOnClasses[]
  judge0Keys             Judge0KeyPool?
  studentAssignmentInfos StudentAssignmentInfo[]
  dsaProgress            DSAProgress[]
}

model Class {
  id            String           @id @default(cuid())
  name          String
  joinCode      String           @unique
  teacherId     String
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  announcements Announcement[]
  assignments   Assignment[]
  teacher       User             @relation(fields: [teacherId], references: [id])
  codingTests   CodingTest[]
  students      UsersOnClasses[]
}

model UsersOnClasses {
  userId     String
  classId    String
  assignedAt DateTime @default(now())
  class      Class    @relation(fields: [classId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@id([userId, classId])
}

model Assignment {
  id                     String                  @id @default(cuid())
  classId                String
  title                  String
  description            String?
  assignDate             DateTime
  dueDate                DateTime
  lastSubmissionCheck    DateTime?
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  class                  Class                   @relation(fields: [classId], references: [id])
  problems               Problem[]
  studentAssignmentInfos StudentAssignmentInfo[]
}

model Problem {
  id           String       @id @default(cuid())
  assignmentId String
  title        String
  url          String
  platform     String
  difficulty   String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  assignment   Assignment   @relation(fields: [assignmentId], references: [id])
  submissions  Submission[]
}

model Submission {
  id             String    @id @default(cuid())
  userId         String
  problemId      String
  completed      Boolean   @default(false)
  manuallyMarked Boolean   @default(false)
  submissionTime DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  problem        Problem   @relation(fields: [problemId], references: [id])
  user           User      @relation(fields: [userId], references: [id])
}

model Announcement {
  id        String   @id @default(cuid())
  content   String
  classId   String
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  class     Class    @relation(fields: [classId], references: [id], onDelete: Cascade)
}

model CodingTest {
  id               String           @id @default(cuid())
  classId          String
  title            String
  description      String?
  duration         Int
  startTime        DateTime
  endTime          DateTime
  isActive         Boolean          @default(false)
  allowedLanguages Json
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  class            Class            @relation(fields: [classId], references: [id], onDelete: Cascade)
  problems         TestProblem[]
  sessions         TestSession[]
  judge0Instance   Judge0Instance?
}

model TestProblem {
  id          String           @id @default(cuid())
  testId      String
  title       String
  description String
  constraints String?
  examples    Json
  testCases   Json
  difficulty  String
  timeLimit   Int
  memoryLimit Int
  order       Int
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  test        CodingTest       @relation(fields: [testId], references: [id], onDelete: Cascade)
  submissions TestSubmission[]
}

model TestSession {
  id                  String           @id @default(cuid())
  testId              String
  userId              String
  startedAt           DateTime         @default(now())
  endedAt             DateTime?
  status              TestStatus       @default(IN_PROGRESS)
  penaltyCount        Int              @default(0)
  totalPenalties      Int              @default(0)
  scoreReduction      Int              @default(0)
  timePenalty         Int              @default(0)
  lastActivity        DateTime         @default(now())
  currentProblemIndex Int              @default(0)
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
  penalties           TestPenalty[]
  test                CodingTest       @relation(fields: [testId], references: [id], onDelete: Cascade)
  user                User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  submissions         TestSubmission[]

  @@unique([testId, userId])
}

model TestSubmission {
  id            String           @id @default(cuid())
  sessionId     String
  problemId     String
  code          String
  language      String
  status        SubmissionStatus @default(PENDING)
  score         Int?
  executionTime Int?
  memoryUsed    Int?
  judgeOutput   Json?
  judgeToken    String?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  problem       TestProblem      @relation(fields: [problemId], references: [id], onDelete: Cascade)
  session       TestSession      @relation(fields: [sessionId], references: [id], onDelete: Cascade)
}

model TestPenalty {
  id             String        @id @default(cuid())
  sessionId      String
  type           PenaltyType
  violationType  ViolationType
  penaltyLevel   PenaltyLevel
  description    String
  details        Json?
  scoreReduction Int           @default(0)
  timePenalty    Int           @default(0)
  timestamp      DateTime      @default(now())
  createdAt      DateTime      @default(now())
  session        TestSession   @relation(fields: [sessionId], references: [id], onDelete: Cascade)
}

model Judge0KeyPool {
  id           String    @id @default(cuid())
  userId       String    @unique
  encryptedKey String
  status       String    @default("ACTIVE")
  dailyUsage   Int       @default(0)
  dailyLimit   Int       @default(50)
  lastUsed     DateTime?
  lastReset    DateTime  @default(now())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model StudentAssignmentInfo {
  id            String     @id @default(cuid())
  user          User       @relation(fields: [userId], references: [id])
  userId        String
  assignment    Assignment @relation(fields: [assignmentId], references: [id])
  assignmentId  String
  lastCheckedAt DateTime
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@unique([userId, assignmentId])
}

// DSA Practice Sheet Progress Tracking
model DSAProgress {
  id               String    @id @default(cuid())
  userId           String
  questionId       String    // mapping_id from JSON
  isCompleted      Boolean   @default(false)
  isRevision       Boolean   @default(false)
  notes            String?
  completedAt      DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, questionId])
  @@index([userId])
  @@index([questionId])
}

enum Role {
  STUDENT
  TEACHER
}

enum TestStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  TERMINATED
  ABANDONED
}

enum SubmissionStatus {
  PENDING
  JUDGING
  ACCEPTED
  WRONG_ANSWER
  TIME_LIMIT_EXCEEDED
  MEMORY_LIMIT_EXCEEDED
  RUNTIME_ERROR
  COMPILATION_ERROR
  SYSTEM_ERROR
}

enum PenaltyType {
  TAB_SWITCH
  FULLSCREEN_EXIT
  VISIBILITY_CHANGE
  COPY_ATTEMPT
  PASTE_ATTEMPT
  FOCUS_LOST
  SUSPICIOUS_ACTIVITY
}

enum ViolationType {
  TAB_SWITCH
  FULLSCREEN_EXIT
  COPY_PASTE
  DEV_TOOLS
  FOCUS_LOSS
  CONTEXT_MENU
}

enum PenaltyLevel {
  WARNING
  MINOR
  MAJOR
  TERMINATION
}

// EC2 Judge0 Instance tracking
model Judge0Instance {
  id                String               @id @default(cuid())
  testId            String               @unique
  instanceId        String               @unique // AWS EC2 instance ID
  instanceType      String               @default("t3.medium") // EC2 instance type
  judgeUrl          String               // Judge0 API endpoint
  status            Judge0InstanceStatus @default(LAUNCHING)
  launchedAt        DateTime             @default(now())
  readyAt           DateTime?            // When Judge0 became ready
  shutdownAt        DateTime?            // When instance was terminated
  shutdownReason    String?              // Reason for shutdown (AUTO_COMPLETION, MANUAL, EMERGENCY)
  lastHealthCheck   DateTime?            // Last successful health check
  cost              Float                @default(0.0)
  finalCost         Float?               // Final calculated cost at shutdown
  studentsServed    Int                  @default(0)
  submissionsCount  Int                  @default(0)
  testCasesExecuted Int                  @default(0)
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
  
  // Relations
  test              CodingTest           @relation(fields: [testId], references: [id], onDelete: Cascade)
  
  @@index([status])
  @@index([testId])
}

// Notification logging for admin alerts and events
model NotificationLog {
  id        String   @id @default(cuid())
  testId    String
  eventType String   // LAUNCHED, READY, COMPLETED, FAILED, SHUTDOWN, COST_ALERT
  severity  String   // INFO, WARNING, ERROR, CRITICAL
  message   String
  details   String?  // JSON string with additional details
  timestamp DateTime @default(now())
  createdAt DateTime @default(now())
  
  @@index([testId])
  @@index([eventType])
  @@index([timestamp])
}

enum Judge0InstanceStatus {
  LAUNCHING     // EC2 instance starting up
  SETTING_UP    // Installing Judge0
  READY         // Ready to accept submissions
  ACTIVE        // Currently serving a test
  SHUTTING_DOWN // Preparing for termination
  TERMINATED    // Instance has been shut down
  FAILED        // Launch or setup failed
}
